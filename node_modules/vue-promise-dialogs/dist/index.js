"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports[Symbol.toStringTag] = "Module";
var vueDemi = require("vue-demi");
const wrapperExists = /* @__PURE__ */ vueDemi.ref(false);
const dialogsData = /* @__PURE__ */ vueDemi.ref({});
function add(component, params, unmountDelay) {
  return new Promise((resolve, reject) => {
    vueDemi.set(dialogsData.value, Symbol(), {
      component: vueDemi.markRaw(component),
      params,
      promiseResolve: resolve,
      promiseReject: reject,
      unmountDelay
    });
  });
}
function resolveDialog(id, result, unmountDelay) {
  dialogsData.value[id].promiseResolve(result);
  unmountDialog(id, unmountDelay);
}
function rejectDialog(id, error, unmountDelay) {
  dialogsData.value[id].promiseReject(error);
  unmountDialog(id, unmountDelay);
}
function unmountDialog(id, delay) {
  const unmount = () => vueDemi.del(dialogsData.value, id);
  if (delay) {
    setTimeout(unmount, delay);
  } else {
    unmount();
  }
}
var PromiseDialogsWrapper = /* @__PURE__ */ vueDemi.defineComponent({
  name: "PromiseDialogsWrapper",
  props: {
    unmountDelay: {
      type: Number,
      default: 0
    }
  },
  setup(props) {
    if (wrapperExists.value) {
      console.error("PromiseDialogsWrapper instance already exists");
    }
    wrapperExists.value = true;
    vueDemi.onBeforeUnmount(() => {
      wrapperExists.value = false;
      dialogsData.value = {};
    });
    return () => vueDemi.h("div", Object.getOwnPropertySymbols(dialogsData.value).map((id) => {
      const value = dialogsData.value[id];
      const component = value.component;
      const params = value.params;
      const resolve = (result, unmountDelay) => resolveDialog(id, result, unmountDelay || value.unmountDelay || props.unmountDelay);
      const reject = (error, unmountDelay) => rejectDialog(id, error, unmountDelay || value.unmountDelay || props.unmountDelay);
      if (vueDemi.isVue3) {
        return vueDemi.h(component, {
          key: id,
          params,
          onResolve: resolve,
          onReject: reject
        });
      }
      return vueDemi.h(component, {
        key: id,
        props: {
          params
        },
        on: {
          resolve,
          reject
        }
      });
    }));
  }
});
function createPromiseDialog(component, unmountDelay) {
  return function dialogFunction(params) {
    if (!wrapperExists.value) {
      throw new Error("PromiseDialogsWrapper instance not found");
    }
    return add(component, params, unmountDelay);
  };
}
function closeAllDialogs(reason, unmountDelay) {
  Object.getOwnPropertySymbols(dialogsData.value).forEach((id) => rejectDialog(id, reason, unmountDelay));
}
exports.PromiseDialogsWrapper = PromiseDialogsWrapper;
exports.closeAllDialogs = closeAllDialogs;
exports.createPromiseDialog = createPromiseDialog;
